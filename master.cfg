# -*- python -*-
# ex: set syntax=python:

from twisted.python import log

c = BuildmasterConfig = {}

c['buildbotNetUsageData'] = None


####### WORKERS

from buildbot.plugins import worker

c['workers'] = [
    worker.Worker("windows", "XXX"),
    worker.Worker("mac", "XXX"),
    worker.Worker("linux-x86", "XXX"),
    worker.Worker("linux-mips", "XXX"),
    worker.Worker("linux-arm", "XXX"),
    worker.Worker("qnx-arm", "XXX"),
]
c['protocols'] = {
    "pb": {
        "port": 8007
    }
}


####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter

c['schedulers'] = []

c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(project="frida/frida", branch="master"),
                            treeStableTimer=5,
                            builderNames=["frida-windows", "frida-mac", "frida-linux-x86", "frida-linux-pi", "frida-android", "frida-linux-mips", "frida-linux-arm", "frida-qnx-arm"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["frida-windows", "frida-mac", "frida-linux-x86", "frida-linux-pi", "frida-android", "frida-linux-mips", "frida-linux-arm", "frida-qnx-arm", "frida-website"]))

c['schedulers'].append(ForceScheduler(
                            name="sdk",
                            builderNames=["sdk-linux-arm", "sdk-linux-armhf", "sdk-linux-mips", "sdk-qnx-arm", "sdk-qnx-armeabi"]))

c['schedulers'].append(SingleBranchScheduler(
                            name="website",
                            change_filter=filter.ChangeFilter(project="frida/frida-website", branch="master"),
                            treeStableTimer=5,
                            builderNames=["frida-website"]))


####### BUILDERS

from buildbot.process.factory import BuildFactory
from buildbot.plugins import steps
from buildbot.steps.source.git import Git
from buildbot.steps.vstudio import VS2015

vsdir = r"C:\Program Files (x86)\Microsoft Visual Studio\2017\Community"

def makeFridaEnv():
    return {
        'MAC_CERTID': "Developer ID Application: ...",
        'IOS_CERTID': "iPhone Developer: ...",
        'IOS_IPADDR': "10.0.4.230",
        'ANDROID_HOME': "/usr/local/opt/android-sdk",
        'ANDROID_NDK_ROOT': "/usr/local/opt/android-ndk-r15c"
    }

def fridaShellCommand(description, command, descriptionDone, **kwargs):
    args = dict(kwargs)
    args['name'] = descriptionDone.split(" ")[0]
    args['description'] = description
    args['descriptionDone'] = descriptionDone
    args['command'] = [ "bash", "-c", command ]
    args['env'] = makeFridaEnv()
    return steps.ShellCommand(**args)

def fridaInteractiveShellCommand(description, command, descriptionDone, **kwargs):
    args = dict(kwargs)
    args['name'] = descriptionDone.split(" ")[0]
    args['description'] = description
    args['descriptionDone'] = descriptionDone
    args['command'] = [ "bash", "-c", command ]
    args['env'] = makeFridaEnv()
    args['usePTY'] = True
    return steps.ShellCommand(**args)

def fridaVCShellCommand(description, arch, command, descriptionDone, **kwargs):
    args = dict(kwargs)
    args['name'] = descriptionDone.split(" ")[0]
    args['description'] = description
    args['descriptionDone'] = descriptionDone
    args['command'] = r"""set "VSCMD_START_DIR=%CD%" && "{0}\VC\Auxiliary\Build\vcvarsall.bat" {1} && {2}""".format(vsdir, arch, command)
    return steps.ShellCommand(**args)

def fridaCompile(description, command, descriptionDone, **kwargs):
    args = dict(kwargs)
    args['name'] = descriptionDone.split(" ")[0]
    args['description'] = description
    args['descriptionDone'] = descriptionDone
    args['command'] = [ "bash", "-c", command ]
    args['env'] = makeFridaEnv()
    return steps.Compile(**args)


def sdkFactory(host):
    sdk = BuildFactory()
    sdk.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=False))
    sdk.addStep(fridaCompile(
        "cleaning build environment",
        "git clean -xffd",
        "clean build environment"))
    sdk.addStep(fridaCompile(
        "building sdk",
        "make -f Makefile.sdk.mk FRIDA_HOST={}".format(host),
        "build sdk"))
    filename = "sdk-{}.tar.bz2".format(host)
    sdk.addStep(steps.FileUpload(
        workersrc="build/" + filename,
        masterdest="~/public_html/sdk-snapshot/" + filename,
        mode=0644))
    return sdk


win = BuildFactory()

win.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))

win.addStep(VS2015(installdir=vsdir,
    mode='rebuild',
    projectfile=r"frida.sln",
    config='Release|Win32',
    description="compiling Release|Win32",
    descriptionDone="compile Release|Win32"))
win.addStep(steps.ShellCommand(
    name="gum-tests",
    description="testing gum for Win32",
    command=[r"build\tmp-windows\Win32-Release\gum-tests\gum-tests.exe"],
    descriptionDone="test gum for Win32"))
win.addStep(steps.ShellCommand(
    name="frida-core-tests",
    description="testing core for Win32",
    command=[r"build\tmp-windows\Win32-Release\frida-tests\frida-tests.exe"],
    descriptionDone="test core for Win32"))
win.addStep(steps.ShellCommand(
    name="frida-python27-tests",
    description="testing python27 bindings for Win32",
    command=[r"C:\Program Files (x86)\Python 2.7\python.exe", "-m", "unittest", "tests.test_core"],
    workdir=r"build\frida-python",
    env={'PYTHONPATH': r"C:\Users\frida\Buildbot\frida-windows\build\build\frida-windows\Win32-Release\lib\python2.7\site-packages"},
    descriptionDone="test python27 bindings for Win32"))
win.addStep(steps.ShellCommand(
    name="frida-python36-tests",
    description="testing python36 bindings for Win32",
    command=[r"C:\Program Files (x86)\Python 3.6\python.exe", "-m", "unittest", "tests.test_core"],
    workdir=r"build\frida-python",
    env={'PYTHONPATH': r"C:\Users\frida\Buildbot\frida-windows\build\build\frida-windows\Win32-Release\lib\python3.6\site-packages"},
    descriptionDone="test python36 bindings for Win32"))

win.addStep(fridaVCShellCommand(
    "generating project file for frida-qml Win32",
    "x86", r"C:\Qt\5.9\msvc2017\bin\qmake.exe -tp vc QMAKE_TARGET.arch=x86",
    "generate project file for frida-qml Win32",
    workdir=r"build\frida-qml"))
win.addStep(fridaVCShellCommand(
    "generating nmake files for frida-qml Win32",
    "x86", r"C:\Qt\5.9\msvc2017\bin\qmake.exe QMAKE_TARGET.arch=x86",
    "generate nmake files for frida-qml Win32",
    workdir=r"build\frida-qml"))
win.addStep(VS2015(installdir=vsdir,
    mode='rebuild',
    projectfile=r"frida-qml\frida-qml.vcxproj",
    config='Release',
    name="frida-qml-build-Win32",
    description="compiling frida-qml Release|Win32",
    descriptionDone="compile frida-qml Release|Win32",
    env={'IgnoreWarnCompileDuplicatedFilename': 'true'}))
win.addStep(steps.ShellCommand(
    name="frida-qml-install-Win32",
    description="installing frida-qml Win32",
    command=[vsdir + r"\VC\Tools\MSVC\14.11.25503\bin\HostX86\x86\nmake.exe", "/f", "Makefile.Release", "install"],
    workdir=r"build\frida-qml",
    descriptionDone="install frida-qml Win32"))

win.addStep(VS2015(installdir=vsdir,
    mode='rebuild',
    projectfile=r"frida.sln",
    config='Release|x64',
    description="compiling Release|x64",
    descriptionDone="compile Release|x64"))
win.addStep(steps.ShellCommand(
    name="gum-tests",
    description="testing gum for x64",
    command=[r"build\tmp-windows\x64-Release\gum-tests\gum-tests.exe"],
    descriptionDone="test gum for x64"))
win.addStep(steps.ShellCommand(
    name="frida-core-tests",
    description="testing core for x64",
    command=[r"build\tmp-windows\x64-Release\frida-tests\frida-tests.exe"],
    descriptionDone="test core for x64"))
win.addStep(steps.ShellCommand(
    name="frida-python27-tests",
    description="testing python27 bindings for x64",
    command=[r"C:\Program Files\Python 2.7\python.exe", "-m", "unittest", "tests.test_core"],
    workdir=r"build\frida-python",
    env={'PYTHONPATH': r"C:\Users\frida\Buildbot\frida-windows\build\build\frida-windows\x64-Release\lib\python2.7\site-packages"},
    descriptionDone="test python27 bindings for x64"))
win.addStep(steps.ShellCommand(
    name="frida-python36-tests",
    description="testing python36 bindings for x64",
    command=[r"C:\Program Files\Python 3.6\python.exe", "-m", "unittest", "tests.test_core"],
    workdir=r"build\frida-python",
    env={'PYTHONPATH': r"C:\Users\frida\Buildbot\frida-windows\build\build\frida-windows\x64-Release\lib\python3.6\site-packages"},
    descriptionDone="test python36 bindings for x64"))

win.addStep(fridaVCShellCommand(
    "generating project file for frida-qml x64",
    "amd64", r"C:\Qt\5.9\msvc2017_64\bin\qmake.exe -tp vc QMAKE_TARGET.arch=x86_64",
    "generate project file for frida-qml x64",
    workdir=r"build\frida-qml"))
win.addStep(fridaVCShellCommand(
    "generating nmake files for frida-qml x64",
    "amd64", r"C:\Qt\5.9\msvc2017_64\bin\qmake.exe QMAKE_TARGET.arch=x86_64",
    "generate nmake files for frida-qml x64",
    workdir=r"build\frida-qml"))
win.addStep(VS2015(installdir=vsdir,
    mode='rebuild',
    projectfile=r"frida-qml\frida-qml.vcxproj",
    config='Release',
    name="frida-qml-build-x64",
    description="compiling frida-qml Release|x64",
    descriptionDone="compile frida-qml Release|x64",
    env={'IgnoreWarnCompileDuplicatedFilename': 'true'}))
win.addStep(steps.ShellCommand(
    name="frida-qml-install-x64",
    description="installing frida-qml x64",
    command=[vsdir + r"\VC\Tools\MSVC\14.11.25503\bin\HostX86\x86\nmake.exe", "/f", "Makefile.Release", "install"],
    workdir=r"build\frida-qml",
    descriptionDone="install frida-qml x64"))

win.addStep(steps.DirectoryUpload(
    workersrc="build/frida-windows",
    masterdest="~/public_html/frida/windows",
    compress='bz2'))

win.addStep(steps.ShellCommand(
    name="release",
    description="releasing frida for windows",
    command=[r"releng\release.py", "windows"],
    descriptionDone="release frida for windows"))


mac = BuildFactory()

def makeMacBuildCommandLine(*commands):
    return " && ".join(commands)

mac.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))
mac.addStep(fridaCompile(
    "cleaning build environment",
    makeMacBuildCommandLine("make -f Makefile.macos.mk clean"),
    "clean build environment"))

mac.addStep(fridaCompile(
    "building server",
    makeMacBuildCommandLine("make -f Makefile.macos.mk server-macos server-ios"),
    "build server"))
mac.addStep(fridaCompile(
    "building gadget",
    makeMacBuildCommandLine("make -f Makefile.macos.mk gadget-macos gadget-ios"),
    "build gadget"))
mac.addStep(fridaCompile(
    "building python bindings",
    makeMacBuildCommandLine(
        "make -f Makefile.macos.mk python-macos PYTHON=/usr/bin/python2.6",
        "make -f Makefile.macos.mk python-macos PYTHON=/usr/bin/python2.7",
        "make -f Makefile.macos.mk python-macos PYTHON=/usr/local/bin/python3.6"
    ),
    "build python bindings"))
mac.addStep(fridaCompile(
    "building node bindings",
    makeMacBuildCommandLine("make -f Makefile.macos.mk node-macos NODE=/opt/node-64/bin/node"),
    "build node bindings"))
mac.addStep(fridaShellCommand(
    "building swift bindings",
    makeMacBuildCommandLine(
        "./releng/devkit.py frida-core macos-x86_64 ./frida-swift/CFrida/macos-x86_64/",
        "cd frida-swift",
        "xcodebuild"
    ),
    "build swift bindings"))
mac.addStep(fridaShellCommand(
    "qmaking qml bindings",
    "/Users/frida/Qt/5.9/clang_64/bin/qmake QMAKE_TARGET.arch=x86_64",
    "qmake qml bindings",
    workdir="build/frida-qml"))
mac.addStep(fridaShellCommand(
    "building qml bindings",
    makeMacBuildCommandLine(
        "make -C frida-qml install",
        "install_name_tool -change /Users/frida/Qt/5.9/clang_64/lib/QtQuick.framework/Versions/5/QtQuick @loader_path/../../lib/QtQuick.framework/Versions/5/QtQuick build/frida-macos-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "install_name_tool -change /Users/frida/Qt/5.9/clang_64/lib/QtQml.framework/Versions/5/QtQml @loader_path/../../lib/QtQml.framework/Versions/5/QtQml build/frida-macos-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "install_name_tool -change /Users/frida/Qt/5.9/clang_64/lib/QtNetwork.framework/Versions/5/QtNetwork @loader_path/../../lib/QtNetwork.framework/Versions/5/QtNetwork build/frida-macos-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "install_name_tool -change /Users/frida/Qt/5.9/clang_64/lib/QtCore.framework/Versions/5/QtCore @loader_path/../../lib/QtCore.framework/Versions/5/QtCore build/frida-macos-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "install_name_tool -change /Users/frida/Qt/5.9/clang_64/lib/QtGui.framework/Versions/5/QtGui @loader_path/../../lib/QtGui.framework/Versions/5/QtGui build/frida-macos-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "strip -Sx build/frida-macos-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib"
    ),
    "build qml bindings"))

mac.addStep(fridaShellCommand(
    "testing gum",
    makeMacBuildCommandLine("make -f Makefile.macos.mk check-gum-macos"),
    "test gum"))
mac.addStep(fridaShellCommand(
    "testing core",
    makeMacBuildCommandLine("make -f Makefile.macos.mk check-core-macos"),
    "test core"))
mac.addStep(fridaInteractiveShellCommand(
    "testing python bindings",
    makeMacBuildCommandLine(
        "make -f Makefile.macos.mk check-python-macos PYTHON=/usr/bin/python2.6",
        "make -f Makefile.macos.mk check-python-macos PYTHON=/usr/bin/python2.7",
        "make -f Makefile.macos.mk check-python-macos PYTHON=/usr/local/bin/python3.6"
    ),
    "test python bindings"))
mac.addStep(fridaInteractiveShellCommand(
    "testing node bindings",
    makeMacBuildCommandLine("make -f Makefile.macos.mk check-node-macos NODE=/opt/node-64/bin/node"),
    "test node bindings"))

mac.addStep(steps.DirectoryUpload(
    workersrc="build/frida-macos-universal",
    masterdest="~/public_html/frida/macos",
    compress='bz2'))
mac.addStep(steps.DirectoryUpload(
    workersrc="build/frida-macos-x86_64/lib/node_modules",
    masterdest="~/public_html/frida/macos/lib/node_modules",
    compress='bz2'))
mac.addStep(steps.DirectoryUpload(
    workersrc="build/frida-macos-x86_64/lib/qt5",
    masterdest="~/public_html/frida/macos/lib/qt5",
    compress='bz2'))
mac.addStep(steps.DirectoryUpload(
    workersrc="build/frida-ios-universal",
    masterdest="~/public_html/frida/ios",
    compress='bz2'))

mac.addStep(fridaShellCommand(
    "releasing frida for macos",
    makeMacBuildCommandLine("/usr/bin/python2.7 releng/release.py macos"),
    "release frida for macos",
    timeout=3600))


linux = BuildFactory()

def makeLinuxBuildCommandLine(*commands):
    prefix = "sudo chroot /home/frida/buildroot sudo -iHu frida "
    return " && ".join(map(lambda command: prefix + command, commands))

linux.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))

linux.addStep(steps.ShellCommand(command=["sudo", "chroot", "/home/frida/buildroot", "rm", "-rf", "/home/frida/zuild"]))
linux.addStep(steps.ShellCommand(command=["sudo", "chroot", "/home/frida/buildroot", "sudo", "-iHu", "frida", "mkdir", "-p", "/home/frida/zuild"]))
linux.addStep(steps.ShellCommand(command=["sudo", "chroot", "/home/frida/buildroot", "sudo", "-iHu", "frida", "chmod", "o+w", "/home/frida/zuild"]))
linux.addStep(steps.ShellCommand(command=["cp", "-r", ".",  "/home/frida/buildroot/home/frida/zuild"]))
linux.addStep(steps.ShellCommand(command=["sudo", "chroot", "/home/frida/buildroot", "chown", "-R", "frida:frida", "/home/frida/zuild"]))

linux.addStep(fridaCompile(
    "building server",
    makeLinuxBuildCommandLine(
        "make -C /home/frida/zuild -f Makefile.linux.mk server-32",
        "make -C /home/frida/zuild -f Makefile.linux.mk server-64"
    ),
    "build server"))
linux.addStep(fridaCompile(
    "building gadget",
    makeLinuxBuildCommandLine(
        "make -C /home/frida/zuild -f Makefile.linux.mk gadget-32",
        "make -C /home/frida/zuild -f Makefile.linux.mk gadget-64"
    ),
    "build gadget"))
linux.addStep(fridaCompile(
    "building python bindings",
    makeLinuxBuildCommandLine(
        "LD_LIBRARY_PATH=/opt/python27-32/lib make -C /home/frida/zuild -f Makefile.linux.mk python-32 PYTHON=/opt/python27-32/bin/python2.7",
        "LD_LIBRARY_PATH=/opt/python27-64/lib make -C /home/frida/zuild -f Makefile.linux.mk python-64 PYTHON=/opt/python27-64/bin/python2.7",
        "LD_LIBRARY_PATH=/opt/python36-32/lib make -C /home/frida/zuild -f Makefile.linux.mk python-32 PYTHON=/opt/python36-32/bin/python3.6",
        "LD_LIBRARY_PATH=/opt/python36-64/lib make -C /home/frida/zuild -f Makefile.linux.mk python-64 PYTHON=/opt/python36-64/bin/python3.6"
    ),
    "build python bindings"))
linux.addStep(fridaCompile(
    "building node bindings",
    makeLinuxBuildCommandLine(
        "make -C /home/frida/zuild -f Makefile.linux.mk node-32 NODE=/opt/node-32/bin/node",
        "make -C /home/frida/zuild -f Makefile.linux.mk node-64 NODE=/opt/node-64/bin/node"
    ),
    "build node bindings"))

linux.addStep(fridaShellCommand(
    "testing gum",
    makeLinuxBuildCommandLine(
        "make -C /home/frida/zuild -f Makefile.linux.mk check-gum-32",
        "make -C /home/frida/zuild -f Makefile.linux.mk check-gum-64"
    ),
    "test gum"))
linux.addStep(fridaShellCommand(
    "testing core",
    makeLinuxBuildCommandLine(
        "make -C /home/frida/zuild -f Makefile.linux.mk check-core-32",
        "make -C /home/frida/zuild -f Makefile.linux.mk check-core-64"
    ),
    "test core"))
linux.addStep(fridaInteractiveShellCommand(
    "testing python bindings",
    makeLinuxBuildCommandLine(
        "LD_LIBRARY_PATH=/opt/python27-32/lib make -C /home/frida/zuild -f Makefile.linux.mk check-python-32 PYTHON=/opt/python27-32/bin/python2.7",
        "LD_LIBRARY_PATH=/opt/python27-64/lib make -C /home/frida/zuild -f Makefile.linux.mk check-python-64 PYTHON=/opt/python27-64/bin/python2.7",
        "LD_LIBRARY_PATH=/opt/python36-32/lib make -C /home/frida/zuild -f Makefile.linux.mk check-python-32 PYTHON=/opt/python36-32/bin/python3.6",
        "LD_LIBRARY_PATH=/opt/python36-64/lib make -C /home/frida/zuild -f Makefile.linux.mk check-python-64 PYTHON=/opt/python36-64/bin/python3.6"
    ),
    "test python bindings"))
linux.addStep(fridaInteractiveShellCommand(
    "testing node bindings",
    makeLinuxBuildCommandLine(
        "make -C /home/frida/zuild -f Makefile.linux.mk check-node-32 NODE=/opt/node-32/bin/node",
        "make -C /home/frida/zuild -f Makefile.linux.mk check-node-64 NODE=/opt/node-64/bin/node"
    ),
    "test node bindings"))

linux.addStep(steps.DirectoryUpload(
    workersrc="/home/frida/buildroot/home/frida/zuild/build/frida-linux-x86",
    masterdest="~/public_html/frida/linux/x86",
    compress='bz2'))
linux.addStep(steps.DirectoryUpload(
    workersrc="/home/frida/buildroot/home/frida/zuild/build/frida-linux-x86_64",
    masterdest="~/public_html/frida/linux/x86_64",
    compress='bz2'))

linux.addStep(fridaShellCommand(
    "releasing frida for linux",
    makeLinuxBuildCommandLine("LD_LIBRARY_PATH=/opt/python27-64/lib /opt/python27-64/bin/python2.7 /home/frida/zuild/releng/release.py linux"),
    "release frida for linux",
    timeout=3600))


android = BuildFactory()

android.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))
android.addStep(fridaCompile(
    "cleaning build environment",
    makeMacBuildCommandLine("make -f Makefile.macos.mk clean"),
    "clean build environment"))

android.addStep(fridaCompile(
    "building server",
    "make -f Makefile.macos.mk server-android",
    "build server"))
android.addStep(fridaCompile(
    "building gadget",
    "make -f Makefile.macos.mk gadget-android",
    "build gadget"))

android.addStep(steps.DirectoryUpload(
    workersrc="build/frida-android-arm",
    masterdest="~/public_html/frida-snapshot/android/arm",
    compress='bz2'))
android.addStep(steps.DirectoryUpload(
    workersrc="build/frida-android-arm64",
    masterdest="~/public_html/frida-snapshot/android/arm64",
    compress='bz2'))
android.addStep(steps.FileUpload(
    workersrc="build/frida-android-arm/lib/frida-gadget.so",
    masterdest="~/public_html/frida-snapshot/android/arm/lib/frida-gadget.so",
    mode=0755))
android.addStep(steps.FileUpload(
    workersrc="build/frida-android-arm64/lib/frida-gadget.so",
    masterdest="~/public_html/frida-snapshot/android/arm64/lib/frida-gadget.so",
    mode=0755))

android.addStep(fridaShellCommand(
    "releasing frida for android",
    makeMacBuildCommandLine("/usr/bin/python2.7 releng/release.py android"),
    "release frida for android"))


pi = BuildFactory()

pi.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))
pi.addStep(fridaCompile(
    "cleaning build environment",
    "make -f Makefile.linux.mk clean",
    "clean build environment"))

pi.addStep(fridaCompile(
    "building core",
    "make -f Makefile.linux.mk build/frida-linux-armhf/lib/pkgconfig/frida-core-1.0.pc",
    "build core"))

pi.addStep(fridaShellCommand(
    "releasing frida for pi",
    makeMacBuildCommandLine("/usr/bin/python2.7 releng/release.py pi"),
    "release frida for pi",
    timeout=3600))


mips = BuildFactory()

mips.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))
mips.addStep(fridaCompile(
    "cleaning build environment",
    "make -f Makefile.linux.mk clean",
    "clean build environment"))

mips.addStep(fridaCompile(
    "building server",
    "make -f Makefile.linux.mk server-mipsel",
    "build server"))
mips.addStep(fridaCompile(
    "building gadget",
    "make -f Makefile.linux.mk gadget-mipsel",
    "build gadget"))

mips.addStep(steps.DirectoryUpload(
    workersrc="build/frida-linux-mipsel",
    masterdest="~/public_html/frida-snapshot/linux/mipsel",
    compress='bz2'))
mips.addStep(steps.FileUpload(
    workersrc="build/frida-linux-mipsel/lib/frida-gadget.so",
    masterdest="~/public_html/frida-snapshot/linux/mipsel/lib/frida-gadget.so",
    mode=0755))

mips.addStep(fridaShellCommand(
    "releasing frida for mips",
    makeMacBuildCommandLine("/usr/bin/python2.7 releng/release.py mips"),
    "release frida for mips",
    timeout=3600))


arm = BuildFactory()

arm.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))
arm.addStep(fridaCompile(
    "cleaning build environment",
    "make -f Makefile.linux.mk clean",
    "clean build environment"))

arm.addStep(fridaCompile(
    "building arm server",
    "make -f Makefile.linux.mk server-arm",
    "build server"))
arm.addStep(fridaCompile(
    "building arm gadget",
    "make -f Makefile.linux.mk gadget-arm",
    "build gadget"))

arm.addStep(steps.DirectoryUpload(
    workersrc="build/frida-linux-arm",
    masterdest="~/public_html/frida-snapshot/linux/arm",
    compress='bz2'))
arm.addStep(steps.FileUpload(
    workersrc="build/frida-linux-arm/lib/frida-gadget.so",
    masterdest="~/public_html/frida-snapshot/linux/arm/lib/frida-gadget.so",
    mode=0755))

arm.addStep(fridaCompile(
    "building armhf server",
    "make -f Makefile.linux.mk server-armhf",
    "build server"))
arm.addStep(fridaCompile(
    "building armhf gadget",
    "make -f Makefile.linux.mk gadget-armhf",
    "build gadget"))

arm.addStep(steps.DirectoryUpload(
    workersrc="build/frida-linux-armhf",
    masterdest="~/public_html/frida-snapshot/linux/armhf",
    compress='bz2'))
arm.addStep(steps.FileUpload(
    workersrc="build/frida-linux-armhf/lib/frida-gadget.so",
    masterdest="~/public_html/frida-snapshot/linux/armhf/lib/frida-gadget.so",
    mode=0755))

arm.addStep(fridaShellCommand(
    "releasing frida for arm",
    makeMacBuildCommandLine("/usr/bin/python2.7 releng/release.py arm"),
    "release frida for arm",
    timeout=3600))


qnx_arm = BuildFactory()

qnx_arm.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))
qnx_arm.addStep(fridaCompile(
    "cleaning build environment",
    "make -f Makefile.linux.mk clean",
    "clean build environment"))

qnx_arm.addStep(fridaCompile(
    "building qnx-arm server",
    "make -f Makefile.linux.mk server-qnx-arm",
    "build server"))
qnx_arm.addStep(fridaCompile(
    "building qnx-arm gadget",
    "make -f Makefile.linux.mk gadget-qnx-arm",
    "build gadget"))

qnx_arm.addStep(steps.DirectoryUpload(
    workersrc="build/frida-qnx-arm",
    masterdest="~/public_html/frida-snapshot/qnx/arm",
    compress='bz2'))
qnx_arm.addStep(steps.FileUpload(
    workersrc="build/frida-qnx-arm/lib/frida-gadget.so",
    masterdest="~/public_html/frida-snapshot/qnx/arm/lib/frida-gadget.so",
    mode=0755))

qnx_arm.addStep(fridaCompile(
    "building qnx_armhf server",
    "make -f Makefile.linux.mk server-qnx-armeabi",
    "build server"))
qnx_arm.addStep(fridaCompile(
    "building qnx_armhf gadget",
    "make -f Makefile.linux.mk gadget-qnx-armeabi",
    "build gadget"))

qnx_arm.addStep(steps.DirectoryUpload(
    workersrc="build/frida-qnx-armeabi",
    masterdest="~/public_html/frida-snapshot/qnx/armeabi",
    compress='bz2'))
qnx_arm.addStep(steps.FileUpload(
    workersrc="build/frida-qnx-armeabi/lib/frida-gadget.so",
    masterdest="~/public_html/frida-snapshot/qnx/armeabi/lib/frida-gadget.so",
    mode=0755))

qnx_arm.addStep(fridaShellCommand(
    "releasing frida for qnx arm",
    makeMacBuildCommandLine("/usr/bin/python2.7 releng/release.py qnx-arm"),
    "release frida for qnx_arm",
    timeout=3600))


sdk_linux_arm = sdkFactory("linux-arm")
sdk_linux_armhf = sdkFactory("linux-armhf")
sdk_linux_mips = sdkFactory("linux-mipsel")
sdk_qnx_arm = sdkFactory("qnx-arm")
sdk_qnx_armeabi = sdkFactory("qnx-armeabi")


website = BuildFactory()

website.addStep(Git(repourl="git://github.com/frida/frida-website.git"))

website.addStep(fridaShellCommand(
    "updating website",
    makeMacBuildCommandLine(
        "git clean -xffd",
        "jekyll build",
        "s3cmd sync --delete-removed --cf-invalidate _site/ s3://XXX/"
    ),
    "update website"))


from buildbot.plugins import util

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="frida-windows",
      workername="windows",
      factory=win))
c['builders'].append(
    util.BuilderConfig(name="frida-mac",
      workername="mac",
      factory=mac))
c['builders'].append(
    util.BuilderConfig(name="frida-linux-x86",
      workername="linux-x86",
      factory=linux))
c['builders'].append(
    util.BuilderConfig(name="frida-linux-pi",
      workername="linux-x86",
      factory=pi))
c['builders'].append(
    util.BuilderConfig(name="frida-android",
      workername="mac",
      factory=android))
c['builders'].append(
    util.BuilderConfig(name="frida-linux-mips",
      workername="linux-mips",
      factory=mips))
c['builders'].append(
    util.BuilderConfig(name="frida-linux-arm",
      workername="linux-arm",
      factory=arm))
c['builders'].append(
    util.BuilderConfig(name="frida-qnx-arm",
      workername="qnx-arm",
      factory=qnx_arm))

c['builders'].append(
    util.BuilderConfig(name="sdk-linux-arm",
      workername="linux-arm",
      factory=sdk_linux_arm))
c['builders'].append(
    util.BuilderConfig(name="sdk-linux-armhf",
      workername="linux-arm",
      factory=sdk_linux_armhf))
c['builders'].append(
    util.BuilderConfig(name="sdk-linux-mips",
      workername="linux-mips",
      factory=sdk_linux_mips))
c['builders'].append(
    util.BuilderConfig(name="sdk-qnx-arm",
      workername="qnx-arm",
      factory=sdk_qnx_arm))
c['builders'].append(
    util.BuilderConfig(name="sdk-qnx-armeabi",
      workername="qnx-arm",
      factory=sdk_qnx_armeabi))

c['builders'].append(
    util.BuilderConfig(name="frida-website",
      workername="mac",
      factory=website))


####### STATUS TARGETS

from buildbot.plugins import reporters

c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}),
                change_hook_dialects={ 'github': {} })

irc = reporters.IRC("irc.freenode.net", "fridabb",
                    useColors=False,
                    channels=[{"channel": "#frida"}],
                    notify_events={
                      'exception': 1,
                      'successToFailure': 1,
                      'failureToSuccess': 1,
                    })
c['services'] = [irc]


####### PROJECT IDENTITY

c['title'] = "Frida"
c['titleURL'] = "https://www.frida.re/"

c['buildbotURL'] = "http://XXX:YYY/"


####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
