# -*- python -*-
# ex: set syntax=python:

from twisted.python import log

c = BuildmasterConfig = {}


####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [
    BuildSlave("win-slave", "XXX"),
    BuildSlave("mac-slave", "YYY"),
    BuildSlave("lin-slave", "ZZZ")
]
c['slavePortnum'] = 9989


####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=5,
                            builderNames=["frida-windows", "frida-mac", "frida-linux", "frida-android"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="website",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=5,
                            builderNames=["frida-website"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["frida-windows", "frida-mac", "frida-linux", "frida-android", "frida-website"]))


####### BUILDERS

from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand, Compile
from buildbot.steps.slave import RemoveDirectory, MakeDirectory
from buildbot.steps.source import Git
from buildbot.steps.transfer import FileUpload, DirectoryUpload
from buildbot.steps.vstudio import VS2013

def makeFridaEnv():
    return {
        'MAC_CERTID': "Developer ID Application: ...",
        'IOS_CERTID': "iPhone Developer: ...",
        'IOS_IPADDR': "10.0.4.230",
        'ANDROID_HOME': "/usr/local/opt/android-sdk",
        'ANDROID_NDK_ROOT': "/usr/local/opt/android-ndk-r12b"
    }

def fridaShellCommand(description, command, descriptionDone, **kwargs):
    args = dict(kwargs)
    args['name'] = descriptionDone.split(" ")[0]
    args['description'] = description
    args['descriptionDone'] = descriptionDone
    args['command'] = [ "bash", "-c", command ]
    args['env'] = makeFridaEnv()
    return ShellCommand(**args)

def fridaInteractiveShellCommand(description, command, descriptionDone, **kwargs):
    args = dict(kwargs)
    args['name'] = descriptionDone.split(" ")[0]
    args['description'] = description
    args['descriptionDone'] = descriptionDone
    args['command'] = [ "bash", "-c", command ]
    args['env'] = makeFridaEnv()
    args['usePTY'] = True
    return ShellCommand(**args)

def fridaCompile(description, command, descriptionDone, **kwargs):
    args = dict(kwargs)
    args['name'] = descriptionDone.split(" ")[0]
    args['description'] = description
    args['descriptionDone'] = descriptionDone
    args['command'] = [ "bash", "-c", command ]
    args['env'] = makeFridaEnv()
    return Compile(**args)


win = BuildFactory()

win.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))

vsdir = r"C:\Program Files (x86)\Microsoft Visual Studio 14.0"

win.addStep(VS2013(installdir=vsdir,
    mode='rebuild',
    projectfile=r"frida.sln",
    config='Release|Win32',
    description="compiling Release|Win32",
    descriptionDone="compile Release|Win32"))
win.addStep(ShellCommand(
    name="gum-tests",
    description="testing gum for Win32",
    command=[r"build\tmp-windows\Win32-Release\gum-tests\gum-tests.exe"],
    descriptionDone="test gum for Win32"))
win.addStep(ShellCommand(
    name="frida-core-tests",
    description="testing core for Win32",
    command=[r"build\tmp-windows\Win32-Release\frida-tests\frida-tests.exe"],
    descriptionDone="test core for Win32"))
win.addStep(ShellCommand(
    name="frida-python27-tests",
    description="testing python27 bindings for Win32",
    command=[r"C:\Program Files (x86)\Python 2.7\python.exe", "-m", "unittest", "tests.test_core"],
    workdir=r"build\frida-python",
    env={'PYTHONPATH': r"C:\Users\frida\Buildbot\frida-windows\build\build\frida-windows\Win32-Release\lib\python2.7\site-packages"},
    descriptionDone="test python27 bindings for Win32"))
win.addStep(ShellCommand(
    name="frida-python35-tests",
    description="testing python35 bindings for Win32",
    command=[r"C:\Program Files (x86)\Python 3.5\python.exe", "-m", "unittest", "tests.test_core"],
    workdir=r"build\frida-python",
    env={'PYTHONPATH': r"C:\Users\frida\Buildbot\frida-windows\build\build\frida-windows\Win32-Release\lib\python3.5\site-packages"},
    descriptionDone="test python35 bindings for Win32"))

win.addStep(ShellCommand(
    name="frida-qml-qmake-project-Win32",
    description="generating project file for frida-qml Win32",
    command=[r"C:\Qt\5.7\msvc2015\bin\qmake.exe", "-tp", "vc", "QMAKE_TARGET.arch=x86"],
    workdir=r"build\frida-qml",
    descriptionDone="generate project file for frida-qml Win32"))
win.addStep(ShellCommand(
    name="frida-qml-qmake-nmake-Win32",
    description="generating nmake files for frida-qml Win32",
    command=[r"C:\Qt\5.7\msvc2015\bin\qmake.exe", "QMAKE_TARGET.arch=x86"],
    workdir=r"build\frida-qml",
    descriptionDone="generate nmake files for frida-qml Win32"))
win.addStep(VS2013(installdir=vsdir,
    mode='rebuild',
    projectfile=r"frida-qml\frida-qml.vcxproj",
    config='Release',
    name="frida-qml-build-Win32",
    description="compiling frida-qml Release|Win32",
    descriptionDone="compile frida-qml Release|Win32",
    env={'IgnoreWarnCompileDuplicatedFilename': 'true'}))
win.addStep(ShellCommand(
    name="frida-qml-install-Win32",
    description="installing frida-qml Win32",
    command=[r"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\nmake.exe", "/f", "Makefile.Release", "install"],
    workdir=r"build\frida-qml",
    descriptionDone="install frida-qml Win32"))

win.addStep(VS2013(installdir=vsdir,
    mode='rebuild',
    projectfile=r"frida.sln",
    config='Release|x64',
    description="compiling Release|x64",
    descriptionDone="compile Release|x64"))
win.addStep(ShellCommand(
    name="gum-tests",
    description="testing gum for x64",
    command=[r"build\tmp-windows\x64-Release\gum-tests\gum-tests.exe"],
    descriptionDone="test gum for x64"))
win.addStep(ShellCommand(
    name="frida-core-tests",
    description="testing core for x64",
    command=[r"build\tmp-windows\x64-Release\frida-tests\frida-tests.exe"],
    descriptionDone="test core for x64"))
win.addStep(ShellCommand(
    name="frida-python27-tests",
    description="testing python27 bindings for x64",
    command=[r"C:\Program Files\Python 2.7\python.exe", "-m", "unittest", "tests.test_core"],
    workdir=r"build\frida-python",
    env={'PYTHONPATH': r"C:\Users\frida\Buildbot\frida-windows\build\build\frida-windows\x64-Release\lib\python2.7\site-packages"},
    descriptionDone="test python27 bindings for x64"))
win.addStep(ShellCommand(
    name="frida-python35-tests",
    description="testing python35 bindings for x64",
    command=[r"C:\Program Files\Python 3.5\python.exe", "-m", "unittest", "tests.test_core"],
    workdir=r"build\frida-python",
    env={'PYTHONPATH': r"C:\Users\frida\Buildbot\frida-windows\build\build\frida-windows\x64-Release\lib\python3.5\site-packages"},
    descriptionDone="test python35 bindings for x64"))

win.addStep(ShellCommand(
    name="frida-qml-qmake-project-x64",
    description="generating project file for frida-qml x64",
    command=[r"C:\Qt\5.7\msvc2015_64\bin\qmake.exe", "-tp", "vc", "QMAKE_TARGET.arch=x86_64"],
    workdir=r"build\frida-qml",
    descriptionDone="generate project file for frida-qml x64"))
win.addStep(ShellCommand(
    name="frida-qml-qmake-nmake-x64",
    description="generating nmake files for frida-qml x64",
    command=[r"C:\Qt\5.7\msvc2015_64\bin\qmake.exe", "QMAKE_TARGET.arch=x86_64"],
    workdir=r"build\frida-qml",
    descriptionDone="generate nmake files for frida-qml x64"))
win.addStep(VS2013(installdir=vsdir,
    mode='rebuild',
    projectfile=r"frida-qml\frida-qml.vcxproj",
    config='Release',
    name="frida-qml-build-x64",
    description="compiling frida-qml Release|x64",
    descriptionDone="compile frida-qml Release|x64",
    env={'IgnoreWarnCompileDuplicatedFilename': 'true'}))
win.addStep(ShellCommand(
    name="frida-qml-install-x64",
    description="installing frida-qml x64",
    command=[r"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\nmake.exe", "/f", "Makefile.Release", "install"],
    workdir=r"build\frida-qml",
    descriptionDone="install frida-qml x64"))

win.addStep(DirectoryUpload(
    slavesrc="build/frida-windows",
    masterdest="~/public_html/frida/windows",
    compress='bz2'))

win.addStep(ShellCommand(
    name="release",
    description="releasing frida for windows",
    command=[r"releng\release.py", "windows"],
    descriptionDone="release frida for windows"))


mac = BuildFactory()

def makeMacBuildCommandLine(*commands):
    return " && ".join(commands)

mac.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))
mac.addStep(fridaCompile(
    "cleaning build environment",
    makeMacBuildCommandLine("make -f Makefile.mac.mk clean"),
    "clean build environment"))

mac.addStep(fridaCompile(
    "building server",
    makeMacBuildCommandLine("make -f Makefile.mac.mk server-mac server-ios"),
    "build server"))
mac.addStep(fridaCompile(
    "building gadget",
    makeMacBuildCommandLine("make -f Makefile.mac.mk gadget-mac gadget-ios"),
    "build gadget"))
mac.addStep(fridaCompile(
    "building python bindings",
    makeMacBuildCommandLine(
        "make -f Makefile.mac.mk python-mac PYTHON=/usr/bin/python2.6",
        "make -f Makefile.mac.mk python-mac PYTHON=/usr/bin/python2.7",
        "make -f Makefile.mac.mk python-mac PYTHON=/usr/local/bin/python3.5"
    ),
    "build python bindings"))
mac.addStep(fridaCompile(
    "building node bindings",
    makeMacBuildCommandLine("make -f Makefile.mac.mk node-mac NODE=/opt/node-64/bin/node"),
    "build node bindings"))
mac.addStep(fridaShellCommand(
    "building swift bindings",
    makeMacBuildCommandLine(
        "./releng/devkit.py frida-core mac-x86_64 ./frida-swift/CFrida/mac-x86_64/",
        "cd frida-swift",
        "xcodebuild"
    ),
    "build swift bindings"))
mac.addStep(fridaShellCommand(
    "qmaking qml bindings",
    "/Users/frida/Qt/5.7/clang_64/bin/qmake QMAKE_TARGET.arch=x86_64",
    "qmake qml bindings",
    workdir="build/frida-qml"))
mac.addStep(fridaShellCommand(
    "building qml bindings",
    makeMacBuildCommandLine(
        "make -C frida-qml install",
        "install_name_tool -change /Users/frida/Qt/5.7/clang_64/lib/QtQuick.framework/Versions/5/QtQuick @loader_path/../../lib/QtQuick.framework/Versions/5/QtQuick build/frida-mac-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "install_name_tool -change /Users/frida/Qt/5.7/clang_64/lib/QtQml.framework/Versions/5/QtQml @loader_path/../../lib/QtQml.framework/Versions/5/QtQml build/frida-mac-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "install_name_tool -change /Users/frida/Qt/5.7/clang_64/lib/QtNetwork.framework/Versions/5/QtNetwork @loader_path/../../lib/QtNetwork.framework/Versions/5/QtNetwork build/frida-mac-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "install_name_tool -change /Users/frida/Qt/5.7/clang_64/lib/QtCore.framework/Versions/5/QtCore @loader_path/../../lib/QtCore.framework/Versions/5/QtCore build/frida-mac-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "install_name_tool -change /Users/frida/Qt/5.7/clang_64/lib/QtGui.framework/Versions/5/QtGui @loader_path/../../lib/QtGui.framework/Versions/5/QtGui build/frida-mac-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "strip -Sx build/frida-mac-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib"
    ),
    "build qml bindings"))

mac.addStep(fridaShellCommand(
    "testing gum",
    makeMacBuildCommandLine("make -f Makefile.mac.mk check-gum-mac"),
    "test gum"))
mac.addStep(fridaShellCommand(
    "testing core",
    makeMacBuildCommandLine("make -f Makefile.mac.mk check-core-mac"),
    "test core"))
mac.addStep(fridaInteractiveShellCommand(
    "testing python bindings",
    makeMacBuildCommandLine(
        "make -f Makefile.mac.mk check-python-mac PYTHON=/usr/bin/python2.6",
        "make -f Makefile.mac.mk check-python-mac PYTHON=/usr/bin/python2.7",
        "make -f Makefile.mac.mk check-python-mac PYTHON=/usr/local/bin/python3.5"
    ),
    "test python bindings"))
mac.addStep(fridaInteractiveShellCommand(
    "testing node bindings",
    makeMacBuildCommandLine("make -f Makefile.mac.mk check-node-mac NODE=/opt/node-64/bin/node"),
    "test node bindings"))

mac.addStep(DirectoryUpload(
    slavesrc="build/frida-mac-universal",
    masterdest="~/public_html/frida/mac",
    compress='bz2'))
mac.addStep(DirectoryUpload(
    slavesrc="build/frida_stripped-mac-x86_64/lib/node_modules",
    masterdest="~/public_html/frida/mac/lib/node_modules",
    compress='bz2'))
mac.addStep(DirectoryUpload(
    slavesrc="build/frida-mac-x86_64/lib/qt5",
    masterdest="~/public_html/frida/mac/lib/qt5",
    compress='bz2'))
mac.addStep(DirectoryUpload(
    slavesrc="build/frida-ios-universal",
    masterdest="~/public_html/frida/ios",
    compress='bz2'))

mac.addStep(fridaShellCommand(
    "releasing frida for mac",
    makeMacBuildCommandLine("/usr/bin/python2.7 releng/release.py mac"),
    "release frida for mac",
    timeout=3600))


linux = BuildFactory()

def makeLinuxBuildCommandLine(*commands):
    prefix = "sudo chroot /home/frida/buildroot sudo -iHu frida "
    return " && ".join(map(lambda command: prefix + command, commands))

linux.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))

linux.addStep(ShellCommand(command=["sudo", "chroot", "/home/frida/buildroot", "rm", "-rf", "/home/frida/zuild"]))
linux.addStep(ShellCommand(command=["sudo", "chroot", "/home/frida/buildroot", "sudo", "-iHu", "frida", "mkdir", "-p", "/home/frida/zuild"]))
linux.addStep(ShellCommand(command=["sudo", "chroot", "/home/frida/buildroot", "sudo", "-iHu", "frida", "chmod", "o+w", "/home/frida/zuild"]))
linux.addStep(ShellCommand(command=["cp", "-r", ".",  "/home/frida/buildroot/home/frida/zuild"]))
linux.addStep(ShellCommand(command=["sudo", "chroot", "/home/frida/buildroot", "chown", "-R", "frida:frida", "/home/frida/zuild"]))

linux.addStep(fridaCompile(
    "building server",
    makeLinuxBuildCommandLine(
        "make -C /home/frida/zuild -f Makefile.linux.mk server-32",
        "make -C /home/frida/zuild -f Makefile.linux.mk server-64"
    ),
    "build server"))
linux.addStep(fridaCompile(
    "building gadget",
    makeLinuxBuildCommandLine(
        "make -C /home/frida/zuild -f Makefile.linux.mk gadget-32",
        "make -C /home/frida/zuild -f Makefile.linux.mk gadget-64"
    ),
    "build gadget"))
linux.addStep(fridaCompile(
    "building python bindings",
    makeLinuxBuildCommandLine(
        "LD_LIBRARY_PATH=/opt/python27-32/lib make -C /home/frida/zuild -f Makefile.linux.mk python-32 PYTHON=/opt/python27-32/bin/python2.7",
        "LD_LIBRARY_PATH=/opt/python27-64/lib make -C /home/frida/zuild -f Makefile.linux.mk python-64 PYTHON=/opt/python27-64/bin/python2.7",
        "LD_LIBRARY_PATH=/opt/python35-32/lib make -C /home/frida/zuild -f Makefile.linux.mk python-32 PYTHON=/opt/python35-32/bin/python3.5",
        "LD_LIBRARY_PATH=/opt/python35-64/lib make -C /home/frida/zuild -f Makefile.linux.mk python-64 PYTHON=/opt/python35-64/bin/python3.5"
    ),
    "build python bindings"))
linux.addStep(fridaCompile(
    "building node bindings",
    makeLinuxBuildCommandLine(
        "make -C /home/frida/zuild -f Makefile.linux.mk node-32 NODE=/opt/node-32/bin/node",
        "make -C /home/frida/zuild -f Makefile.linux.mk node-64 NODE=/opt/node-64/bin/node"
    ),
    "build node bindings"))

linux.addStep(fridaShellCommand(
    "testing gum",
    makeLinuxBuildCommandLine(
        "make -C /home/frida/zuild -f Makefile.linux.mk check-gum-32",
        "make -C /home/frida/zuild -f Makefile.linux.mk check-gum-64"
    ),
    "test gum"))
linux.addStep(fridaShellCommand(
    "testing core",
    makeLinuxBuildCommandLine(
        "make -C /home/frida/zuild -f Makefile.linux.mk check-core-32",
        "make -C /home/frida/zuild -f Makefile.linux.mk check-core-64"
    ),
    "test core"))
linux.addStep(fridaInteractiveShellCommand(
    "testing python bindings",
    makeLinuxBuildCommandLine(
        "LD_LIBRARY_PATH=/opt/python27-32/lib make -C /home/frida/zuild -f Makefile.linux.mk check-python-32 PYTHON=/opt/python27-32/bin/python2.7",
        "LD_LIBRARY_PATH=/opt/python27-64/lib make -C /home/frida/zuild -f Makefile.linux.mk check-python-64 PYTHON=/opt/python27-64/bin/python2.7",
        "LD_LIBRARY_PATH=/opt/python35-32/lib make -C /home/frida/zuild -f Makefile.linux.mk check-python-32 PYTHON=/opt/python35-32/bin/python3.5",
        "LD_LIBRARY_PATH=/opt/python35-64/lib make -C /home/frida/zuild -f Makefile.linux.mk check-python-64 PYTHON=/opt/python35-64/bin/python3.5"
    ),
    "test python bindings"))
linux.addStep(fridaInteractiveShellCommand(
    "testing node bindings",
    makeLinuxBuildCommandLine(
        "make -C /home/frida/zuild -f Makefile.linux.mk check-node-32 NODE=/opt/node-32/bin/node",
        "make -C /home/frida/zuild -f Makefile.linux.mk check-node-64 NODE=/opt/node-64/bin/node"
    ),
    "test node bindings"))

linux.addStep(DirectoryUpload(
    slavesrc="/home/frida/buildroot/home/frida/zuild/build/frida_stripped-linux-i386",
    masterdest="~/public_html/frida/linux/i386",
    compress='bz2'))
linux.addStep(DirectoryUpload(
    slavesrc="/home/frida/buildroot/home/frida/zuild/build/frida_stripped-linux-x86_64",
    masterdest="~/public_html/frida/linux/x86_64",
    compress='bz2'))

linux.addStep(fridaShellCommand(
    "releasing frida for linux",
    makeLinuxBuildCommandLine("LD_LIBRARY_PATH=/opt/python27-64/lib /opt/python27-64/bin/python2.7 /home/frida/zuild/releng/release.py linux"),
    "release frida for linux",
    timeout=3600))


android = BuildFactory()

android.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))
android.addStep(fridaCompile(
    "cleaning build environment",
    makeMacBuildCommandLine("make -f Makefile.mac.mk clean"),
    "clean build environment"))

android.addStep(fridaCompile(
    "building server",
    "make -f Makefile.mac.mk server-android",
    "build server"))
android.addStep(fridaCompile(
    "building gadget",
    "make -f Makefile.mac.mk gadget-android",
    "build gadget"))

android.addStep(DirectoryUpload(
    slavesrc="build/frida_stripped-android-arm",
    masterdest="~/public_html/frida-snapshot/android/arm",
    compress='bz2'))
android.addStep(DirectoryUpload(
    slavesrc="build/frida_stripped-android-arm64",
    masterdest="~/public_html/frida-snapshot/android/arm64",
    compress='bz2'))
android.addStep(FileUpload(
    slavesrc="build/frida-android-arm/lib/frida-gadget.so",
    masterdest="~/public_html/frida-snapshot/android/arm/lib/frida-gadget.so",
    mode=0755))
android.addStep(FileUpload(
    slavesrc="build/frida-android-arm64/lib/frida-gadget.so",
    masterdest="~/public_html/frida-snapshot/android/arm64/lib/frida-gadget.so",
    mode=0755))

android.addStep(fridaShellCommand(
    "releasing frida for android",
    makeMacBuildCommandLine("/usr/bin/python2.7 releng/release.py android"),
    "release frida for android"))


website = BuildFactory()

website.addStep(Git(repourl="git://github.com/frida/frida-website.git"))

website.addStep(fridaShellCommand(
    "updating website",
    makeMacBuildCommandLine(
        "git clean -xffd",
        "git clone git@github.com:frida/frida.github.io.git _tmp",
        "rm -rf _tmp/*",
        "jekyll build -d _tmp",
        "cd _tmp",
        "git add .",
        "git commit -a -m 'Update from frida-website' --amend",
        "git push -f"
    ""),
    "update website"))


from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="frida-windows",
      slavenames=["win-slave"],
      factory=win))
c['builders'].append(
    BuilderConfig(name="frida-mac",
      slavenames=["mac-slave"],
      factory=mac))
c['builders'].append(
    BuilderConfig(name="frida-linux",
      slavenames=["lin-slave"],
      factory=linux))
c['builders'].append(
    BuilderConfig(name="frida-android",
      slavenames=["mac-slave"],
      factory=android))
c['builders'].append(
    BuilderConfig(name="frida-website",
      slavenames=["mac-slave"],
      factory=website))


####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("xxx", "yyy")]),
    gracefulShutdown = False,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg, change_hook_dialects={ 'github' : True }))


####### PROJECT IDENTITY

c['title'] = "frida"
c['titleURL'] = "http://github.com/frida"

c['buildbotURL'] = "http://build.frida.re:8010/"


####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
