# -*- python -*-
# ex: set syntax=python:

import params
from twisted.python import log

c = BuildmasterConfig = {}

c['buildbotNetUsageData'] = None


####### WORKERS

from buildbot.plugins import worker

docker_options = {
    'docker_host': params.DOCKER_HOST,
    'masterFQDN': params.DOCKER_MASTER_FQDN,
    'hostconfig': {
        'network_mode': 'host',
        'privileged': True,
    }
}

c['workers'] = [
    worker.Worker("windows", params.WINDOWS_WORKER_PASSWORD),
    worker.Worker("mac", params.MAC_WORKER_PASSWORD, max_builds=1),
    worker.DockerLatentWorker("manylinux-x86_64", params.MANYLINUX_X86_64_WORKER_PASSWORD,
        image="fridadotre/worker-manylinux-x86_64:latest",
        volumes=[
            "credentials:/home/buildbot/.credentials",
            "manylinux-x86_64-build:/worker/frida-manylinux-x86_64/build",
        ],
        **docker_options),

    worker.DockerLatentWorker("ubuntu_20_04-x86_64", params.UBUNTU_20_04_X86_64_WORKER_PASSWORD,
        image="fridadotre/worker-ubuntu-20.04-x86_64:latest",
        volumes=[
            "credentials:/home/buildbot/.credentials",
            "ubuntu_20_04-x86_64-build:/worker/frida-ubuntu_20_04-x86_64/build",
        ],
        **docker_options),
    worker.DockerLatentWorker("fedora_32-x86_64", params.FEDORA_32_X86_64_WORKER_PASSWORD,
        image="fridadotre/worker-fedora-32-x86_64:latest",
        volumes=[
            "credentials:/home/buildbot/.credentials",
            "fedora_32-x86_64-build:/worker/frida-fedora_32-x86_64/build",
        ],
        **docker_options),
]
c['protocols'] = {
    "pb": {
        "port": 8007
    }
}


####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter

c['schedulers'] = []

main_builder_names = [
    "frida-windows",
    "frida-macos",
    "frida-manylinux-x86_64",
    "frida-ios",
    "frida-android",
    "frida-ubuntu_20_04-x86_64",
    "frida-fedora_32-x86_64"
]
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(project="frida/frida", branch="master"),
                            treeStableTimer=5,
                            builderNames=main_builder_names))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=main_builder_names + ["frida-website"]))

c['schedulers'].append(SingleBranchScheduler(
                            name="website",
                            change_filter=filter.ChangeFilter(project="frida/frida-website", branch="master"),
                            treeStableTimer=5,
                            builderNames=["frida-website"]))


####### BUILDERS

from buildbot.process.factory import BuildFactory
from buildbot.plugins import steps
from buildbot.steps.source.git import Git
from buildbot.steps.vstudio import VS2017 as VS2019

vsdir = r"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community"

def makeFridaEnv():
    return {
        'MACOS_SDK_ROOT': "/Applications/Xcode9.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk",
        'MACOS_CERTID': params.MACOS_CERTID,
        'IOS_CERTID': params.IOS_CERTID,
        'IOS_IPADDR': "10.0.4.230",
        'ANDROID_HOME': "/usr/local/opt/android-sdk",
        'ANDROID_NDK_ROOT': "/usr/local/opt/android-ndk-r21"
    }

def fridaShellCommand(description, command, descriptionDone, **kwargs):
    args = dict(kwargs)
    args['name'] = descriptionDone.split(" ")[0]
    args['description'] = description
    args['descriptionDone'] = descriptionDone
    args['command'] = [ "bash", "-c", command ]
    args['env'] = makeFridaEnv()
    return steps.ShellCommand(**args)

def fridaInteractiveShellCommand(description, command, descriptionDone, **kwargs):
    args = dict(kwargs)
    args['name'] = descriptionDone.split(" ")[0]
    args['description'] = description
    args['descriptionDone'] = descriptionDone
    args['command'] = [ "bash", "-c", command ]
    args['env'] = makeFridaEnv()
    args['usePTY'] = True
    return steps.ShellCommand(**args)

def fridaVCShellCommand(description, arch, command, descriptionDone, **kwargs):
    args = dict(kwargs)
    args['name'] = descriptionDone.split(" ")[0]
    args['description'] = description
    args['descriptionDone'] = descriptionDone
    args['command'] = r"""set "VSCMD_START_DIR=%CD%" && "{0}\VC\Auxiliary\Build\vcvarsall.bat" {1} && {2}""".format(vsdir, arch, command)
    return steps.ShellCommand(**args)

def fridaCompile(description, command, descriptionDone, **kwargs):
    args = dict(kwargs)
    args['name'] = descriptionDone.split(" ")[0]
    args['description'] = description
    args['descriptionDone'] = descriptionDone
    args['command'] = [ "bash", "-c", command ]
    args['env'] = makeFridaEnv()
    return steps.Compile(**args)


def sdkFactory(host):
    sdk = BuildFactory()
    sdk.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=False))
    sdk.addStep(fridaCompile(
        "cleaning build environment",
        "git clean -xffd",
        "clean build environment"))
    sdk.addStep(fridaCompile(
        "building sdk",
        "make -f Makefile.sdk.mk FRIDA_HOST={}".format(host),
        "build sdk"))
    filename = "sdk-{}.tar.bz2".format(host)
    sdk.addStep(steps.FileUpload(
        workersrc="build/" + filename,
        masterdest="~/public_html/sdk-snapshot/" + filename,
        mode=0o644))
    return sdk


win = BuildFactory()

win.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))

win.addStep(VS2019(installdir=vsdir,
    mode='rebuild',
    projectfile=r"frida.sln",
    config='Release|Win32',
    description="compiling Release|Win32",
    descriptionDone="compile Release|Win32"))
win.addStep(steps.ShellCommand(
    name="gum-tests",
    description="testing gum for Win32",
    command=[r"build\tmp-windows\Win32-Release\gum-tests\gum-tests.exe"],
    descriptionDone="test gum for Win32"))
win.addStep(steps.ShellCommand(
    name="frida-core-tests",
    description="testing core for Win32",
    command=[r"build\tmp-windows\Win32-Release\frida-tests\frida-tests.exe"],
    descriptionDone="test core for Win32"))
win.addStep(steps.ShellCommand(
    name="frida-python27-tests",
    description="testing python27 bindings for Win32",
    command=[r"C:\Program Files (x86)\Python 2.7\python.exe", "-m", "unittest", "tests.test_core"],
    workdir=r"build\frida-python",
    env={'PYTHONPATH': r"C:\Users\frida\Buildbot\frida-windows\build\build\frida-windows\Win32-Release\lib\python2.7\site-packages"},
    descriptionDone="test python27 bindings for Win32"))
win.addStep(steps.ShellCommand(
    name="frida-python38-tests",
    description="testing python38 bindings for Win32",
    command=[r"C:\Program Files (x86)\Python 3.8\python.exe", "-m", "unittest", "tests.test_core"],
    workdir=r"build\frida-python",
    env={'PYTHONPATH': r"C:\Users\frida\Buildbot\frida-windows\build\build\frida-windows\Win32-Release\lib\python3.8\site-packages"},
    descriptionDone="test python38 bindings for Win32"))

win.addStep(fridaVCShellCommand(
    "generating project file for frida-qml Win32",
    "x86", r"C:\Qt\5.14.2\msvc2017\bin\qmake.exe -tp vc QMAKE_TARGET.arch=x86",
    "generate project file for frida-qml Win32",
    workdir=r"build\frida-qml"))
win.addStep(fridaVCShellCommand(
    "generating nmake files for frida-qml Win32",
    "x86", r"C:\Qt\5.14.2\msvc2017\bin\qmake.exe QMAKE_TARGET.arch=x86",
    "generate nmake files for frida-qml Win32",
    workdir=r"build\frida-qml"))
win.addStep(VS2019(installdir=vsdir,
    mode='rebuild',
    projectfile=r"frida-qml\frida-qml.vcxproj",
    config='Release',
    name="frida-qml-build-Win32",
    description="compiling frida-qml Release|Win32",
    descriptionDone="compile frida-qml Release|Win32",
    env={'IgnoreWarnCompileDuplicatedFilename': 'true'}))
win.addStep(steps.ShellCommand(
    name="frida-qml-install-Win32",
    description="installing frida-qml Win32",
    command=[vsdir + r"\VC\Tools\MSVC\14.25.28610\bin\Hostx64\x86\nmake.exe", "/f", "Makefile.Release", "install"],
    workdir=r"build\frida-qml",
    descriptionDone="install frida-qml Win32"))

win.addStep(VS2019(installdir=vsdir,
    mode='rebuild',
    projectfile=r"frida.sln",
    config='Release|x64',
    description="compiling Release|x64",
    descriptionDone="compile Release|x64"))
win.addStep(steps.ShellCommand(
    name="gum-tests",
    description="testing gum for x64",
    command=[r"build\tmp-windows\x64-Release\gum-tests\gum-tests.exe"],
    descriptionDone="test gum for x64"))
win.addStep(steps.ShellCommand(
    name="frida-core-tests",
    description="testing core for x64",
    command=[r"build\tmp-windows\x64-Release\frida-tests\frida-tests.exe"],
    descriptionDone="test core for x64"))
win.addStep(steps.ShellCommand(
    name="frida-python27-tests",
    description="testing python27 bindings for x64",
    command=[r"C:\Program Files\Python 2.7\python.exe", "-m", "unittest", "tests.test_core"],
    workdir=r"build\frida-python",
    env={'PYTHONPATH': r"C:\Users\frida\Buildbot\frida-windows\build\build\frida-windows\x64-Release\lib\python2.7\site-packages"},
    descriptionDone="test python27 bindings for x64"))
win.addStep(steps.ShellCommand(
    name="frida-python38-tests",
    description="testing python38 bindings for x64",
    command=[r"C:\Program Files\Python 3.8\python.exe", "-m", "unittest", "tests.test_core"],
    workdir=r"build\frida-python",
    env={'PYTHONPATH': r"C:\Users\frida\Buildbot\frida-windows\build\build\frida-windows\x64-Release\lib\python3.8\site-packages"},
    descriptionDone="test python38 bindings for x64"))

win.addStep(fridaVCShellCommand(
    "generating project file for frida-qml x64",
    "amd64", r"C:\Qt\5.14.2\msvc2017_64\bin\qmake.exe -tp vc QMAKE_TARGET.arch=x86_64",
    "generate project file for frida-qml x64",
    workdir=r"build\frida-qml"))
win.addStep(fridaVCShellCommand(
    "generating nmake files for frida-qml x64",
    "amd64", r"C:\Qt\5.14.2\msvc2017_64\bin\qmake.exe QMAKE_TARGET.arch=x86_64",
    "generate nmake files for frida-qml x64",
    workdir=r"build\frida-qml"))
win.addStep(VS2019(installdir=vsdir,
    mode='rebuild',
    projectfile=r"frida-qml\frida-qml.vcxproj",
    config='Release',
    name="frida-qml-build-x64",
    description="compiling frida-qml Release|x64",
    descriptionDone="compile frida-qml Release|x64",
    env={'IgnoreWarnCompileDuplicatedFilename': 'true'}))
win.addStep(steps.ShellCommand(
    name="frida-qml-install-x64",
    description="installing frida-qml x64",
    command=[vsdir + r"\VC\Tools\MSVC\14.25.28610\bin\Hostx64\x64\nmake.exe", "/f", "Makefile.Release", "install"],
    workdir=r"build\frida-qml",
    descriptionDone="install frida-qml x64"))

win.addStep(steps.DirectoryUpload(
    workersrc="build/frida-windows",
    masterdest="~/public_html/frida/windows"))

win.addStep(steps.ShellCommand(
    name="release",
    description="releasing frida for windows",
    command=[r"releng\release.py", "windows"],
    descriptionDone="release frida for windows"))


macos = BuildFactory()

def makeMacBuildCommandLine(*commands):
    return " && ".join(commands)

macos.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))
macos.addStep(fridaCompile(
    "cleaning build environment",
    makeMacBuildCommandLine("make clean"),
    "clean build environment"))

macos.addStep(fridaCompile(
    "building core for macos",
    makeMacBuildCommandLine("make core-macos"),
    "build core for macos"))
macos.addStep(fridaCompile(
    "building gadget for macos",
    makeMacBuildCommandLine("make gadget-macos"),
    "build gadget for macos"))
macos.addStep(fridaCompile(
    "building python bindings",
    makeMacBuildCommandLine(
        "make python-macos PYTHON=/usr/bin/python2.7",
        "make python-macos PYTHON=/usr/local/bin/python3.8"
    ),
    "build python bindings"))
macos.addStep(fridaCompile(
    "building node bindings",
    makeMacBuildCommandLine("make node-macos NODE=/usr/local/bin/node"),
    "build node bindings"))
macos.addStep(fridaShellCommand(
    "building swift bindings",
    makeMacBuildCommandLine(
        "./releng/devkit.py frida-core macos-x86_64 ./frida-swift/CFrida/macos-x86_64/",
        "cd frida-swift",
        "/Applications/Xcode11.app/Contents/Developer/usr/bin/xcodebuild"
    ),
    "build swift bindings"))
macos.addStep(fridaShellCommand(
    "qmaking qml bindings",
    "/Users/frida/Qt/5.14.2/clang_64/bin/qmake QMAKE_TARGET.arch=x86_64",
    "qmake qml bindings",
    workdir="build/frida-qml"))
macos.addStep(fridaShellCommand(
    "building qml bindings",
    makeMacBuildCommandLine(
        "make -C frida-qml install",
        "install_name_tool -change /Users/frida/Qt/5.14.2/clang_64/lib/QtQuick.framework/Versions/5/QtQuick @loader_path/../../lib/QtQuick.framework/Versions/5/QtQuick build/frida-macos-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "install_name_tool -change /Users/frida/Qt/5.14.2/clang_64/lib/QtQml.framework/Versions/5/QtQml @loader_path/../../lib/QtQml.framework/Versions/5/QtQml build/frida-macos-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "install_name_tool -change /Users/frida/Qt/5.14.2/clang_64/lib/QtNetwork.framework/Versions/5/QtNetwork @loader_path/../../lib/QtNetwork.framework/Versions/5/QtNetwork build/frida-macos-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "install_name_tool -change /Users/frida/Qt/5.14.2/clang_64/lib/QtCore.framework/Versions/5/QtCore @loader_path/../../lib/QtCore.framework/Versions/5/QtCore build/frida-macos-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "install_name_tool -change /Users/frida/Qt/5.14.2/clang_64/lib/QtGui.framework/Versions/5/QtGui @loader_path/../../lib/QtGui.framework/Versions/5/QtGui build/frida-macos-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib",
        "strip -Sx build/frida-macos-x86_64/lib/qt5/qml/Frida/libfrida-qml.dylib"
    ),
    "build qml bindings"))

macos.addStep(fridaShellCommand(
    "testing gum",
    makeMacBuildCommandLine("make check-gum-macos"),
    "test gum"))
macos.addStep(fridaShellCommand(
    "testing core",
    makeMacBuildCommandLine("make check-core-macos"),
    "test core"))
macos.addStep(fridaInteractiveShellCommand(
    "testing python bindings",
    makeMacBuildCommandLine(
        "make check-python-macos PYTHON=/usr/bin/python2.7",
        "make check-python-macos PYTHON=/usr/local/bin/python3.8"
    ),
    "test python bindings"))
macos.addStep(fridaInteractiveShellCommand(
    "testing node bindings",
    makeMacBuildCommandLine("make check-node-macos NODE=/usr/local/bin/node"),
    "test node bindings"))

macos.addStep(steps.DirectoryUpload(
    workersrc="build/frida-macos-universal",
    masterdest="~/public_html/frida/macos"))
macos.addStep(steps.DirectoryUpload(
    workersrc="build/frida-macos-x86_64/lib/node_modules",
    masterdest="~/public_html/frida/macos/lib/node_modules"))
macos.addStep(steps.DirectoryUpload(
    workersrc="build/frida-macos-x86_64/lib/qt5",
    masterdest="~/public_html/frida/macos/lib/qt5"))

macos.addStep(fridaShellCommand(
    "releasing frida for macos",
    makeMacBuildCommandLine("releng/release.py macos"),
    "release frida for macos",
    timeout=3600))


manylinux_x86_64 = BuildFactory()
linux = manylinux_x86_64

def makeLinuxBuildCommandLine(*commands):
    return " && ".join(commands)

linux.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))
linux.addStep(fridaCompile(
    "cleaning build environment",
    makeLinuxBuildCommandLine("make clean"),
    "clean build environment"))

linux.addStep(fridaCompile(
    "building core",
    makeLinuxBuildCommandLine(
        "make core-linux-x86",
        "make core-linux-x86_64"
    ),
    "build core"))
linux.addStep(fridaCompile(
    "building python bindings",
    makeLinuxBuildCommandLine(
        "make python-linux-x86    PYTHON=/opt/python-32/cp27-cp27mu/bin/python2.7",
        "make python-linux-x86    PYTHON=/opt/python-32/cp38-cp38/bin/python3.8",
        "make python-linux-x86_64 PYTHON=/opt/python-64/cp27-cp27mu/bin/python2.7",
        "make python-linux-x86_64 PYTHON=/opt/python-64/cp38-cp38/bin/python3.8"
    ),
    "build python bindings"))
linux.addStep(fridaCompile(
    "building node bindings",
    makeLinuxBuildCommandLine(
        "make node-linux-x86    NODE=/opt/node-32/bin/node",
        "make node-linux-x86_64 NODE=/opt/node-64/bin/node"
    ),
    "build node bindings"))

linux.addStep(fridaShellCommand(
    "testing gum",
    makeLinuxBuildCommandLine(
        "make check-gum-linux-x86",
        "make check-gum-linux-x86_64"
    ),
    "test gum"))
linux.addStep(fridaShellCommand(
    "testing core",
    makeLinuxBuildCommandLine(
        "make check-core-linux-x86",
        "make check-core-linux-x86_64"
    ),
    "test core"))
linux.addStep(fridaInteractiveShellCommand(
    "testing python bindings",
    makeLinuxBuildCommandLine(
        "make check-python-linux-x86    PYTHON=/opt/python-32/cp27-cp27mu/bin/python2.7",
        "make check-python-linux-x86    PYTHON=/opt/python-32/cp38-cp38/bin/python3.8",
        "make check-python-linux-x86_64 PYTHON=/opt/python-64/cp27-cp27mu/bin/python2.7",
        "make check-python-linux-x86_64 PYTHON=/opt/python-64/cp38-cp38/bin/python3.8"
    ),
    "test python bindings"))
linux.addStep(fridaInteractiveShellCommand(
    "testing node bindings",
    makeLinuxBuildCommandLine(
        "make check-node-linux-x86    NODE=/opt/node-32/bin/node",
        "make check-node-linux-x86_64 NODE=/opt/node-64/bin/node"
    ),
    "test node bindings"))

linux.addStep(steps.DirectoryUpload(
    workersrc="build/frida-linux-x86",
    masterdest="~/public_html/frida/linux/x86"))
linux.addStep(steps.DirectoryUpload(
    workersrc="build/frida-linux-x86_64",
    masterdest="~/public_html/frida/linux/x86_64"))

linux.addStep(fridaShellCommand(
    "releasing frida for linux-x86",
    makeLinuxBuildCommandLine("releng/release.py manylinux-x86_64"),
    "release frida for linux-x86",
    timeout=3600))


ios = BuildFactory()

ios.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))
ios.addStep(fridaCompile(
    "cleaning build environment",
    makeMacBuildCommandLine("make clean"),
    "clean build environment"))

ios.addStep(fridaCompile(
    "building core for ios",
    makeMacBuildCommandLine("make core-ios"),
    "build core for ios"))
ios.addStep(fridaCompile(
    "building gadget for ios",
    makeMacBuildCommandLine("make gadget-ios"),
    "build gadget for ios"))

ios.addStep(steps.DirectoryUpload(
    workersrc="build/frida-ios-universal",
    masterdest="~/public_html/frida/ios"))

ios.addStep(fridaShellCommand(
    "releasing frida for ios",
    makeMacBuildCommandLine("releng/release.py ios"),
    "release frida for ios",
    timeout=3600))


android = BuildFactory()

android.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))
android.addStep(fridaCompile(
    "cleaning build environment",
    makeMacBuildCommandLine("make clean"),
    "clean build environment"))

android.addStep(fridaCompile(
    "building core",
    "make core-android-x86 core-android-x86_64 core-android-arm core-android-arm64",
    "build core"))

android.addStep(steps.DirectoryUpload(
    workersrc="build/frida-android-arm",
    masterdest="~/public_html/frida-snapshot/android/arm"))
android.addStep(steps.DirectoryUpload(
    workersrc="build/frida-android-arm64",
    masterdest="~/public_html/frida-snapshot/android/arm64"))
android.addStep(steps.FileUpload(
    workersrc="build/frida-android-arm/lib/frida-gadget.so",
    masterdest="~/public_html/frida-snapshot/android/arm/lib/frida-gadget.so",
    mode=0o755))
android.addStep(steps.FileUpload(
    workersrc="build/frida-android-arm64/lib/frida-gadget.so",
    masterdest="~/public_html/frida-snapshot/android/arm64/lib/frida-gadget.so",
    mode=0o755))

android.addStep(fridaShellCommand(
    "releasing frida for android",
    makeMacBuildCommandLine("releng/release.py android"),
    "release frida for android",
    timeout=3600))


ubuntu_20_04_x86_64 = BuildFactory()
ubuntu = ubuntu_20_04_x86_64

ubuntu.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))
ubuntu.addStep(fridaCompile(
    "cleaning build environment",
    "make clean",
    "clean build environment"))

ubuntu.addStep(fridaCompile(
    "building python bindings",
    "LD=/usr/bin/ld.gold make python-linux-x86_64 PYTHON=/usr/bin/python3.8",
    "build python bindings"))

ubuntu.addStep(fridaInteractiveShellCommand(
    "testing python bindings",
    "make check-python-linux-x86_64 PYTHON=/usr/bin/python3.8",
    "test python bindings"))

ubuntu.addStep(fridaShellCommand(
    "releasing frida for ubuntu",
    "releng/release.py ubuntu_20_04-x86_64",
    "release frida for ubuntu",
    timeout=3600))


fedora_32_x86_64 = BuildFactory()
fedora = fedora_32_x86_64

fedora.addStep(Git(repourl="git://github.com/frida/frida.git", submodules=True))
fedora.addStep(fridaCompile(
    "cleaning build environment",
    "make clean",
    "clean build environment"))

fedora.addStep(fridaCompile(
    "building python bindings",
    "LD=/usr/bin/ld.gold make python-linux-x86_64 PYTHON=/usr/bin/python3.8",
    "build python bindings"))

fedora.addStep(fridaInteractiveShellCommand(
    "testing python bindings",
    "make check-python-linux-x86_64 PYTHON=/usr/bin/python3.8",
    "test python bindings"))

fedora.addStep(fridaShellCommand(
    "releasing frida for fedora",
    "releng/release.py fedora_32-x86_64",
    "release frida for fedora",
    timeout=3600))


website = BuildFactory()

website.addStep(Git(repourl="git://github.com/frida/frida-website.git"))

website.addStep(fridaShellCommand(
    "updating website",
    makeMacBuildCommandLine(
        "git clean -xffd",
        "/usr/local/opt/ruby/bin/bundle exec jekyll build",
        "./_releng/deploy.py"
    ),
    "update website"))


from buildbot.plugins import util

c['builders'] = [
    util.BuilderConfig(name="frida-windows", workername="windows", factory=win),
    util.BuilderConfig(name="frida-macos", workername="mac", factory=macos),
    util.BuilderConfig(name="frida-manylinux-x86_64", workername="manylinux-x86_64", factory=manylinux_x86_64),
    util.BuilderConfig(name="frida-ios", workername="mac", factory=ios),
    util.BuilderConfig(name="frida-android", workername="mac", factory=android),

    util.BuilderConfig(name="frida-ubuntu_20_04-x86_64", workername="ubuntu_20_04-x86_64", factory=ubuntu_20_04_x86_64),
    util.BuilderConfig(name="frida-fedora_32-x86_64", workername="fedora_32-x86_64", factory=fedora_32_x86_64),

    util.BuilderConfig(name="frida-website", workername="mac", factory=website),
]


####### STATUS TARGETS

from buildbot.plugins import reporters

c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}),
                change_hook_dialects={ 'github': {} })

irc = reporters.IRC("irc.freenode.net", "fridabb",
                    useColors=False,
                    channels=[{"channel": "#frida"}],
                    notify_events={
                      'exception': 1,
                      'successToFailure': 1,
                      'failureToSuccess': 1,
                    })
c['services'] = [irc]


####### PROJECT IDENTITY

c['title'] = "Frida"
c['titleURL'] = "https://www.frida.re/"

c['buildbotURL'] = params.BUILDBOT_URL


####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
